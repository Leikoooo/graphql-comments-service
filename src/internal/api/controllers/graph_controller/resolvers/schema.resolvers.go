package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"OzonTest/src/internal/api/controllers/graph_controller/generated"
	"OzonTest/src/internal/api/controllers/graph_controller/model"
	"context"
	"errors"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	return r.PostService.CreatePost(input)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*model.Comment, error) {
	if len(input.Content) > 2000 {
		return nil, errors.New("the length of the comment must be less than 2000")
	}
	return r.CommentService.CreateComment(input)
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*model.Post, error) {
	return r.PostService.GetPosts()
}

// GetCommentsByPostID is the resolver for the getCommentsByPostID field.
func (r *queryResolver) GetCommentsByPostID(ctx context.Context, postID string, page int, pageSize int, maxDepth int, maxReplies int) ([]*model.Comment, error) {
	if page < 1 {
		return nil, errors.New("page must be more than zero")
	}
	if pageSize < 1 {
		return nil, errors.New("pageSize must be more than zero")
	}
	if maxDepth < 1 {
		return nil, errors.New("maxDepth must be more than zero")
	}
	if maxReplies < 1 {
		return nil, errors.New("maxDepth must be more than zero")
	}
	return r.CommentService.GetCommentsByPostID(postID, page, pageSize, maxDepth, maxReplies)
}

// GetPostByID is the resolver for the getPostByID field.
func (r *queryResolver) GetPostByID(ctx context.Context, id string) (*model.Post, error) {
	return r.PostService.GetPostByID(id)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
